# Autogenerated from a Treetop grammar. Edits may be lost.


# a Treetop Grammar to parse email lists
 
module EmailList
  include Treetop::Runtime

  def root
    @root ||= :full_email_address
  end

  module FullEmailAddress0
    def email_name
      elements[1]
    end

    def comma_or_space_and_comma
      elements[3]
    end

    def bracketed_email
      elements[4]
    end
  end

  def _nt_full_email_address
    start_index = index
    if node_cache[:full_email_address].has_key?(index)
      cached = node_cache[:full_email_address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_email_name
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_comma_or_space_and_comma
          s0 << r4
          if r4
            r5 = _nt_bracketed_email
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FullEmailAddress0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:full_email_address][start_index] = r0

    r0
  end

  def _nt_email_name
    start_index = index
    if node_cache[:email_name].has_key?(index)
      cached = node_cache[:email_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^"]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:email_name][start_index] = r0

    r0
  end

  module CommaOrSpaceAndComma0
    def whatever_spaces1
      elements[0]
    end

    def whatever_spaces2
      elements[2]
    end
  end

  def _nt_comma_or_space_and_comma
    start_index = index
    if node_cache[:comma_or_space_and_comma].has_key?(index)
      cached = node_cache[:comma_or_space_and_comma][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_whatever_spaces
    s0 << r1
    if r1
      if has_terminal?(',', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(',')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_whatever_spaces
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CommaOrSpaceAndComma0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comma_or_space_and_comma][start_index] = r0

    r0
  end

  def _nt_whatever_spaces
    start_index = index
    if node_cache[:whatever_spaces].has_key?(index)
      cached = node_cache[:whatever_spaces][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ ]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:whatever_spaces][start_index] = r0

    r0
  end

  module BracketedEmail0
    def email_addr
      elements[1]
    end

  end

  def _nt_bracketed_email
    start_index = index
    if node_cache[:bracketed_email].has_key?(index)
      cached = node_cache[:bracketed_email][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('<', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('<')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_email_addr
      s0 << r2
      if r2
        if has_terminal?('>', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('>')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BracketedEmail0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bracketed_email][start_index] = r0

    r0
  end

  module EmailAddr0
  end

  def _nt_email_addr
    start_index = index
    if node_cache[:email_addr].has_key?(index)
      cached = node_cache[:email_addr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[A-Za-z0-9.]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('@', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[A-Za-z0-9.]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EmailAddr0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:email_addr][start_index] = r0

    r0
  end

end

class EmailListParser < Treetop::Runtime::CompiledParser
  include EmailList
end


